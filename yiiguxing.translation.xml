<application>
  <component name="AppStorage">
    <histories>
      <item value="slave" />
      <item value="半波" />
      <item value="序号" />
      <item value="algorithm" />
      <item value="算法" />
      <item value="门阀值" />
      <item value="偏移" />
      <item value="相位" />
      <item value="门磁" />
      <item value="温湿度" />
      <item value="水位" />
      <item value="水浸" />
      <item value="chart" />
      <item value="char" />
      <item value="/**&#10;     * Removes all of the elements from this list (optional operation).&#10;     * The list will be empty after this call returns.&#10;     *&#10;     * @throws UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation&#10;     *         is not supported by this list&#10;     */" />
      <item value="丝袜" />
      <item value="性感" />
      <item value="/**&#10;     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the&#10;     * elements of this stream, using the provided identity value and an&#10;     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;&#10;     * accumulation function, and returns the reduced value.  This is equivalent&#10;     * to:&#10;     * &lt;pre&gt;{@code&#10;     *     T result = identity;&#10;     *     for (T element : this stream)&#10;     *         result = accumulator.apply(result, element)&#10;     *     return result;&#10;     * }&lt;/pre&gt;&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * &lt;p&gt;The {@code identity} value must be an identity for the accumulator&#10;     * function. This means that for all {@code t},&#10;     * {@code accumulator.apply(identity, t)} is equal to {@code t}.&#10;     * The {@code accumulator} function must be an&#10;     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; function.&#10;     *&#10;     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal&#10;     * operation&lt;/a&gt;.&#10;     *&#10;     * @apiNote Sum, min, max, average, and string concatenation are all special&#10;     * cases of reduction. Summing a stream of numbers can be expressed as:&#10;     *&#10;     * &lt;pre&gt;{@code&#10;     *     Integer sum = integers.reduce(0, (a, b) -&gt; a+b);&#10;     * }&lt;/pre&gt;&#10;     *&#10;     * or:&#10;     *&#10;     * &lt;pre&gt;{@code&#10;     *     Integer sum = integers.reduce(0, Integer::sum);&#10;     * }&lt;/pre&gt;&#10;     *&#10;     * &lt;p&gt;While this may seem a more roundabout way to perform an aggregation&#10;     * compared to simply mutating a running total in a loop, reduction&#10;     * operations parallelize more gracefully, without needing additional&#10;     * synchronization and with greatly reduced risk of data races.&#10;     *&#10;     * @param identity the identity value for the accumulating function&#10;     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,&#10;     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,&#10;     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;&#10;     *                    function for combining two values&#10;     * @return the result of the reduction&#10;     */" />
      <item value="syntax" />
      <item value="offset" />
      <item value=" /**&#10;     * Returns the next pseudorandom, uniformly distributed {@code int}&#10;     * value from this random number generator's sequence. The general&#10;     * contract of {@code nextInt} is that one {@code int} value is&#10;     * pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible&#10;     * {@code int} values are produced with (approximately) equal probability.&#10;     *&#10;     * &lt;p&gt;The method {@code nextInt} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public int nextInt() {&#10;     *   return next(32);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code int}&#10;     *         value from this random number generator's sequence&#10;     */" />
      <item value=" /**&#10;     * Creates a new random number generator. This constructor sets&#10;     * the seed of the random number generator to a value very likely&#10;     * to be distinct from any other invocation of this constructor.&#10;     */" />
      <item value="断路器" />
      <item value="倒数第二个" />
      <item value="&#9;/**&#10;&#9; * Return the contents of the file as an array of bytes.&#10;&#9; * @return the contents of the file as bytes, or an empty byte array if empty&#10;&#9; * @throws IOException in case of access errors (if the temporary store fails)&#10;&#9; */" />
      <item value="&#9;/**&#10;&#9; * Return the size of the file in bytes.&#10;&#9; * @return the size of the file, or 0 if empty&#10;&#9; */" />
      <item value="minus Seconds" />
      <item value="digit" />
      <item value="/**&#10;     * Parses the string argument as an unsigned integer in the radix&#10;     * specified by the second argument.  An unsigned integer maps the&#10;     * values usually associated with negative numbers to positive&#10;     * numbers larger than {@code MAX_VALUE}.&#10;     *&#10;     * The characters in the string must all be digits of the&#10;     * specified radix (as determined by whether {@link&#10;     * java.lang.Character#digit(char, int)} returns a nonnegative&#10;     * value), except that the first character may be an ASCII plus&#10;     * sign {@code '+'} ({@code '\u005Cu002B'}). The resulting&#10;     * integer value is returned.&#10;     *&#10;     * &lt;p&gt;An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * &lt;li&gt;The radix is either smaller than&#10;     * {@link java.lang.Character#MIN_RADIX} or&#10;     * larger than {@link java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * &lt;li&gt;Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a plus sign&#10;     * {@code '+'} ({@code '\u005Cu002B'}) provided that the&#10;     * string is longer than length 1.&#10;     *&#10;     * &lt;li&gt;The value represented by the string is larger than the&#10;     * largest unsigned {@code int}, 2&lt;sup&gt;32&lt;/sup&gt;-1.&#10;     *&#10;     * &lt;/ul&gt;&#10;     *&#10;     *&#10;     * @param      s   the {@code String} containing the unsigned integer&#10;     *                  representation to be parsed&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the integer represented by the string argument in the&#10;     *             specified radix.&#10;     * @throws     NumberFormatException if the {@code String}&#10;     *             does not contain a parsable {@code int}.&#10;     * @since 1.8&#10;     */" />
      <item value="时标" />
      <item value="计算" />
      <item value="处理" />
      <item value="    /**&#10;     * Removes all of the elements from this list (optional operation).&#10;     * The list will be empty after this call returns.&#10;     *&#10;     * @throws UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation&#10;     *         is not supported by this list&#10;     */" />
      <item value="    /**&#10;     * Returns the index of the last occurrence of the specified element&#10;     * in this list, or -1 if this list does not contain the element.&#10;     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that&#10;     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,&#10;     * or -1 if there is no such index.&#10;     *&#10;     * @param o element to search for&#10;     * @return the index of the last occurrence of the specified element in&#10;     *         this list, or -1 if this list does not contain the element&#10;     * @throws ClassCastException if the type of the specified element&#10;     *         is incompatible with this list&#10;     *         (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)&#10;     * @throws NullPointerException if the specified element is null and this&#10;     *         list does not permit null elements&#10;     *         (&lt;a href=&quot;Collection.html#optional-restrictions&quot;&gt;optional&lt;/a&gt;)" />
      <item value="millis" />
      <item value="mutu" />
      <item value="别名" />
      <item value="precis" />
      <item value="Selected region contains block comment suffix" />
      <item value="电量" />
      <item value="温度" />
      <item value="版本" />
      <item value="型号" />
      <item value="延时" />
      <item value="采集" />
      <item value="sign-off" />
      <item value="amend" />
      <item value="查询" />
      <item value="sensor" />
      <item value="Unsigned" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="235" />
        <entry key="ENGLISH" value="236" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Segoe UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6787a6ce50600ef8" />
      </youdao-translate>
    </option>
  </component>
</application>