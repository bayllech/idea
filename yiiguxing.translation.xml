<application>
  <component name="AppStorage">
    <histories>
      <item value="变压器" />
      <item value="铁芯" />
      <item value=" /**&#10;     * Parses the string argument as a signed {@code long} in the&#10;     * radix specified by the second argument. The characters in the&#10;     * string must all be digits of the specified radix (as determined&#10;     * by whether {@link java.lang.Character#digit(char, int)} returns&#10;     * a nonnegative value), except that the first character may be an&#10;     * ASCII minus sign {@code '-'} ({@code '\u005Cu002D'}) to&#10;     * indicate a negative value or an ASCII plus sign {@code '+'}&#10;     * ({@code '\u005Cu002B'}) to indicate a positive value. The&#10;     * resulting {@code long} value is returned.&#10;     *&#10;     * &lt;p&gt;Note that neither the character {@code L}&#10;     * ({@code '\u005Cu004C'}) nor {@code l}&#10;     * ({@code '\u005Cu006C'}) is permitted to appear at the end&#10;     * of the string as a type indicator, as would be permitted in&#10;     * Java programming language source code - except that either&#10;     * {@code L} or {@code l} may appear as a digit for a&#10;     * radix greater than or equal to 22.&#10;     *&#10;     * &lt;p&gt;An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * &lt;ul&gt;&#10;     *&#10;     * &lt;li&gt;The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * &lt;li&gt;The {@code radix} is either smaller than {@link&#10;     * java.lang.Character#MIN_RADIX} or larger than {@link&#10;     * java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * &lt;li&gt;Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a minus sign&#10;     * {@code '-'} ({@code '\u005Cu002d'}) or plus sign {@code&#10;     * '+'} ({@code '\u005Cu002B'}) provided that the string is&#10;     * longer than length 1.&#10;     *&#10;     * &lt;li&gt;The value represented by the string is not a value of type&#10;     *      {@code long}.&#10;     * &lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;Examples:&#10;     * &lt;blockquote&gt;&lt;pre&gt;&#10;     * parseLong(&quot;0&quot;, 10) returns 0L&#10;     * parseLong(&quot;473&quot;, 10) returns 473L&#10;     * parseLong(&quot;+42&quot;, 10) returns 42L&#10;     * parseLong(&quot;-0&quot;, 10) returns 0L&#10;     * parseLong(&quot;-FF&quot;, 16) returns -255L&#10;     * parseLong(&quot;1100110&quot;, 2) returns 102L&#10;     * parseLong(&quot;99&quot;, 8) throws a NumberFormatException&#10;     * parseLong(&quot;Hazelnut&quot;, 10) throws a NumberFormatException&#10;     * parseLong(&quot;Hazelnut&quot;, 36) returns 1356099454469L&#10;     * &lt;/pre&gt;&lt;/blockquote&gt;&#10;     *&#10;     * @param      s       the {@code String} containing the&#10;     *                     {@code long} representation to be parsed.&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the {@code long} represented by the string argument in&#10;     *             the specified radix.&#10;     * @throws     NumberFormatException  if the string does not contain a&#10;     *             parsable {@code long}.&#10;     */" />
      <item value="/**&#10;     * Returns the angle &lt;i&gt;theta&lt;/i&gt; from the conversion of rectangular&#10;     * coordinates ({@code x},&amp;nbsp;{@code y}) to polar&#10;     * coordinates (r,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;).&#10;     * This method computes the phase &lt;i&gt;theta&lt;/i&gt; by computing an arc tangent&#10;     * of {@code y/x} in the range of -&lt;i&gt;pi&lt;/i&gt; to &lt;i&gt;pi&lt;/i&gt;. Special&#10;     * cases:&#10;     * &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.&#10;     * &lt;li&gt;If the first argument is positive zero and the second argument&#10;     * is positive, or the first argument is positive and finite and the&#10;     * second argument is positive infinity, then the result is positive&#10;     * zero.&#10;     * &lt;li&gt;If the first argument is negative zero and the second argument&#10;     * is positive, or the first argument is negative and finite and the&#10;     * second argument is positive infinity, then the result is negative zero.&#10;     * &lt;li&gt;If the first argument is positive zero and the second argument&#10;     * is negative, or the first argument is positive and finite and the&#10;     * second argument is negative infinity, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;.&#10;     * &lt;li&gt;If the first argument is negative zero and the second argument&#10;     * is negative, or the first argument is negative and finite and the&#10;     * second argument is negative infinity, then the result is the&#10;     * {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;.&#10;     * &lt;li&gt;If the first argument is positive and the second argument is&#10;     * positive zero or negative zero, or the first argument is positive&#10;     * infinity and the second argument is finite, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/2.&#10;     * &lt;li&gt;If the first argument is negative and the second argument is&#10;     * positive zero or negative zero, or the first argument is negative&#10;     * infinity and the second argument is finite, then the result is the&#10;     * {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;/2.&#10;     * &lt;li&gt;If both arguments are positive infinity, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If the first argument is positive infinity and the second argument&#10;     * is negative infinity, then the result is the {@code double}&#10;     * value closest to 3*&lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If the first argument is negative infinity and the second argument&#10;     * is positive infinity, then the result is the {@code double} value&#10;     * closest to -&lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If both arguments are negative infinity, then the result is the&#10;     * {@code double} value closest to -3*&lt;i&gt;pi&lt;/i&gt;/4.&lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;The computed result must be within 2 ulps of the exact result.&#10;     * Results must be semi-monotonic.&#10;     *&#10;     * @param   y   the ordinate coordinate&#10;     * @param   x   the abscissa coordinate&#10;     * @return  the &lt;i&gt;theta&lt;/i&gt; component of the point&#10;     *          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)&#10;     *          in polar coordinates that corresponds to the point&#10;     *          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates.&#10;     */" />
      <item value="阻性" />
      <item value="corresponds" />
      <item value="/**&#10;     * Returns the floor modulus of the {@code int} arguments.&#10;     * &lt;p&gt;&#10;     * The floor modulus is {@code x - (floorDiv(x, y) * y)},&#10;     * has the same sign as the divisor {@code y}, and&#10;     * is in the range of {@code -abs(y) &lt; r &lt; +abs(y)}.&#10;     *&#10;     * &lt;p&gt;&#10;     * The relationship between {@code floorDiv} and {@code floorMod} is such that:&#10;     * &lt;ul&gt;&#10;     *   &lt;li&gt;{@code floorDiv(x, y) * y + floorMod(x, y) == x}&#10;     * &lt;/ul&gt;&#10;     * &lt;p&gt;&#10;     * The difference in values between {@code floorMod} and&#10;     * the {@code %} operator is due to the difference between&#10;     * {@code floorDiv} that returns the integer less than or equal to the quotient&#10;     * and the {@code /} operator that returns the integer closest to zero.&#10;     * &lt;p&gt;&#10;     * Examples:&#10;     * &lt;ul&gt;&#10;     *   &lt;li&gt;If the signs of the arguments are the same, the results&#10;     *       of {@code floorMod} and the {@code %} operator are the same.  &lt;br&gt;&#10;     *       &lt;ul&gt;&#10;     *       &lt;li&gt;{@code floorMod(4, 3) == 1}; &amp;nbsp; and {@code (4 % 3) == 1}&lt;/li&gt;&#10;     *       &lt;/ul&gt;&#10;     *   &lt;li&gt;If the signs of the arguments are different, the results differ from the {@code %} operator.&lt;br&gt;&#10;     *      &lt;ul&gt;&#10;     *      &lt;li&gt;{@code floorMod(+4, -3) == -2}; &amp;nbsp; and {@code (+4 % -3) == +1} &lt;/li&gt;&#10;     *      &lt;li&gt;{@code floorMod(-4, +3) == +2}; &amp;nbsp; and {@code (-4 % +3) == -1} &lt;/li&gt;&#10;     *      &lt;li&gt;{@code floorMod(-4, -3) == -1}; &amp;nbsp; and {@code (-4 % -3) == -1 } &lt;/li&gt;&#10;     *      &lt;/ul&gt;&#10;     *   &lt;/li&gt;&#10;     * &lt;/ul&gt;&#10;     * &lt;p&gt;&#10;     * If the signs of arguments are unknown and a positive modulus&#10;     * is needed it can be computed as {@code (floorMod(x, y) + abs(y)) % abs(y)}.&#10;     *&#10;     * @param x the dividend&#10;     * @param y the divisor&#10;     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}&#10;     * @throws ArithmeticException if the divisor {@code y} is zero&#10;     * @see #floorDiv(int, int)&#10;     * @since 1.8&#10;     */" />
      <item value="角度" />
      <item value="系数" />
      <item value="/**&#10;     * Creates a new instance.&#10;     *&#10;     * @param maxFrameLength&#10;     *        the maximum length of the frame.  If the length of the frame is&#10;     *        greater than this value, {@link TooLongFrameException} will be&#10;     *        thrown.&#10;     * @param lengthFieldOffset&#10;     *        the offset of the length field&#10;     * @param lengthFieldLength&#10;     *        the length of the length field&#10;     * @param lengthAdjustment&#10;     *        the compensation value to add to the value of the length field&#10;     * @param initialBytesToStrip&#10;     *        the number of first bytes to strip out from the decoded frame&#10;     */" />
      <item value=" /**&#10;     * Removes all of the elements from this list (optional operation).&#10;     * The list will be empty after this call returns.&#10;     *&#10;     * @throws UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation&#10;     *         is not supported by this list&#10;     */" />
      <item value="同步" />
      <item value="假的" />
      <item value="调整" />
      <item value="/**&#10;     * Returns a representation of the specified floating-point value&#10;     * according to the IEEE 754 floating-point &quot;single format&quot; bit&#10;     * layout, preserving Not-a-Number (NaN) values.&#10;     *&#10;     * &lt;p&gt;Bit 31 (the bit that is selected by the mask&#10;     * {@code 0x80000000}) represents the sign of the floating-point&#10;     * number.&#10;     * Bits 30-23 (the bits that are selected by the mask&#10;     * {@code 0x7f800000}) represent the exponent.&#10;     * Bits 22-0 (the bits that are selected by the mask&#10;     * {@code 0x007fffff}) represent the significand (sometimes called&#10;     * the mantissa) of the floating-point number.&#10;     *&#10;     * &lt;p&gt;If the argument is positive infinity, the result is&#10;     * {@code 0x7f800000}.&#10;     *&#10;     * &lt;p&gt;If the argument is negative infinity, the result is&#10;     * {@code 0xff800000}.&#10;     *&#10;     * &lt;p&gt;If the argument is NaN, the result is the integer representing&#10;     * the actual NaN value.  Unlike the {@code floatToIntBits}&#10;     * method, {@code floatToRawIntBits} does not collapse all the&#10;     * bit patterns encoding a NaN to a single &quot;canonical&quot;&#10;     * NaN value.&#10;     *&#10;     * &lt;p&gt;In all cases, the result is an integer that, when given to the&#10;     * {@link #intBitsToFloat(int)} method, will produce a&#10;     * floating-point value the same as the argument to&#10;     * {@code floatToRawIntBits}.&#10;     *&#10;     * @param   value   a floating-point number.&#10;     * @return the bits that represent the floating-point number.&#10;     * @since 1.3&#10;     */" />
      <item value="/*&#10; * Copyright (c) 2017 Vladislav Kochedykov&#10; * All rights reserved&#10; *&#10; * This file is part of JLibModbus.&#10; *&#10; * Redistribution and use in source and binary forms, with or without modification,&#10; * are permitted provided that the following conditions are met:&#10; *&#10; * 1. Redistributions of source code must retain the above copyright notice,&#10; * this list of conditions and the following disclaimer.&#10; *&#10; * 2. Redistributions in binary form must reproduce the above copyright notice,&#10; * this list of conditions and the following disclaimer in the documentation and/or&#10; * other materials provided with the distribution.&#10; *&#10; * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse&#10; * or promote products derived from this software without specific prior written permission.&#10; *&#10; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES,&#10; * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.&#10; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,&#10; * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;&#10; * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#10; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,&#10; * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10; *&#10; * Authors: Vladislav Y. Kochedykov, software engineer.&#10; * email: vladislav.kochedykov@gmail.com&#10; */" />
      <item value="Coil" />
      <item value="    /**&#10;     * Waits if necessary for at most the given time for this future&#10;     * to complete, and then returns its result, if available.&#10;     *&#10;     * @param timeout the maximum time to wait&#10;     * @param unit the time unit of the timeout argument&#10;     * @return the result value&#10;     * @throws CancellationException if this future was cancelled&#10;     * @throws ExecutionException if this future completed exceptionally&#10;     * @throws InterruptedException if the current thread was interrupted&#10;     * while waiting&#10;     * @throws TimeoutException if the wait timed out&#10;     */" />
      <item value="force" />
      <item value="相对" />
      <item value="心跳" />
      <item value="    /**&#10;     * Returns the arctangent of a number.&#10;     * @param x A numeric expression for which the arctangent is needed.&#10;     */" />
      <item value="半径" />
      <item value="直径" />
      <item value=" Could not open JDBC Connection for transaction; nested exception is java.sql.SQLException: interrupt" />
      <item value="Unexpected error occurred in scheduled task." />
      <item value="nexpected error occurred in scheduled task." />
      <item value="interrupt" />
      <item value="square" />
      <item value="标识" />
      <item value=" * This class also provides various utility methods to help implementation&#10; * of a new buffer type, generation of hex dump and swapping an integer's&#10; * byte order." />
      <item value="/**&#10; * Creates a new {@link ByteBuf} by allocating new space or by wrapping&#10; * or copying existing byte arrays, byte buffers and a string.&#10; *&#10; * &lt;h3&gt;Use static import&lt;/h3&gt;&#10; * This classes is intended to be used with Java 5 static import statement:&#10; *&#10; * &lt;pre&gt;&#10; * import static io.netty.buffer.{@link Unpooled}.*;&#10; *&#10; * {@link ByteBuf} heapBuffer    = buffer(128);&#10; * {@link ByteBuf} directBuffer  = directBuffer(256);&#10; * {@link ByteBuf} wrappedBuffer = wrappedBuffer(new byte[128], new byte[256]);&#10; * {@link ByteBuf} copiedBuffe r = copiedBuffer({@link ByteBuffer}.allocate(128));&#10; * &lt;/pre&gt;&#10; *&#10; * &lt;h3&gt;Allocating a new buffer&lt;/h3&gt;&#10; *&#10; * Three buffer types are provided out of the box.&#10; *&#10; * &lt;ul&gt;&#10; * &lt;li&gt;{@link #buffer(int)} allocates a new fixed-capacity heap buffer.&lt;/li&gt;&#10; * &lt;li&gt;{@link #directBuffer(int)} allocates a new fixed-capacity direct buffer.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; *&#10; * &lt;h3&gt;Creating a wrapped buffer&lt;/h3&gt;&#10; *&#10; * Wrapped buffer is a buffer which is a view of one or more existing&#10; * byte arrays and byte buffers.  Any changes in the content of the original&#10; * array or buffer will be visible in the wrapped buffer.  Various wrapper&#10; * methods are provided and their name is all {@code wrappedBuffer()}.&#10; * You might want to take a look at the methods that accept varargs closely if&#10; * you want to create a buffer which is composed of more than one array to&#10; * reduce the number of memory copy.&#10; *&#10; * &lt;h3&gt;Creating a copied buffer&lt;/h3&gt;&#10; *&#10; * Copied buffer is a deep copy of one or more existing byte arrays, byte&#10; * buffers or a string.  Unlike a wrapped buffer, there's no shared data&#10; * between the original data and the copied buffer.  Various copy methods are&#10; * provided and their name is all {@code copiedBuffer()}.  It is also convenient&#10; * to use this operation to merge multiple buffers into one buffer.&#10; *&#10; * &lt;h3&gt;Miscellaneous utility methods&lt;/h3&gt;&#10; *&#10; * This class also provides various utility methods to help implementation&#10; * of a new buffer type, generation of hex dump and swapping an integer's&#10; * byte order.&#10; */" />
      <item value="偏移" />
      <item value="Class Path Scanning Candidate Component Provider" />
      <item value="Concurrent Modification Exception" />
      <item value="/**&#10;     * Generates the next pseudorandom number. Subclasses should&#10;     * override this, as this is used by all other methods.&#10;     *&#10;     * &lt;p&gt;The general contract of {@code next} is that it returns an&#10;     * {@code int} value and if the argument {@code bits} is between&#10;     * {@code 1} and {@code 32} (inclusive), then that many low-order&#10;     * bits of the returned value will be (approximately) independently&#10;     * chosen bit values, each of which is (approximately) equally&#10;     * likely to be {@code 0} or {@code 1}. The method {@code next} is&#10;     * implemented by class {@code Random} by atomically updating the seed to&#10;     *  &lt;pre&gt;{@code (seed * 0x5DEECE66DL + 0xBL) &amp; ((1L &lt;&lt; 48) - 1)}&lt;/pre&gt;&#10;     * and returning&#10;     *  &lt;pre&gt;{@code (int)(seed &gt;&gt;&gt; (48 - bits))}.&lt;/pre&gt;&#10;     *&#10;     * This is a linear congruential pseudorandom number generator, as&#10;     * defined by D. H. Lehmer and described by Donald E. Knuth in&#10;     * &lt;i&gt;The Art of Computer Programming,&lt;/i&gt; Volume 3:&#10;     * &lt;i&gt;Seminumerical Algorithms&lt;/i&gt;, section 3.2.1.&#10;     *&#10;     * @param  bits random bits&#10;     * @return the next pseudorandom value from this random number&#10;     *         generator's sequence&#10;     * @since  1.1&#10;     */" />
      <item value=" /**&#10;     * Returns the next pseudorandom, uniformly distributed {@code int}&#10;     * value from this random number generator's sequence. The general&#10;     * contract of {@code nextInt} is that one {@code int} value is&#10;     * pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible&#10;     * {@code int} values are produced with (approximately) equal probability.&#10;     *&#10;     * &lt;p&gt;The method {@code nextInt} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public int nextInt() {&#10;     *   return next(32);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code int}&#10;     *         value from this random number generator's sequence&#10;     */" />
      <item value="black" />
      <item value="blank" />
      <item value="黑色" />
      <item value="slave" />
      <item value="半波" />
      <item value="序号" />
      <item value="algorithm" />
      <item value="算法" />
      <item value="门阀值" />
      <item value="相位" />
      <item value="门磁" />
      <item value="温湿度" />
      <item value="水位" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="270" />
        <entry key="ENGLISH" value="270" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Segoe UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6787a6ce50600ef8" />
      </youdao-translate>
    </option>
  </component>
</application>