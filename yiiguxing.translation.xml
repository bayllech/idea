<application>
  <component name="AppStorage">
    <histories>
      <item value="Telescopic Joint" />
      <item value="Telescopic" />
      <item value="amend" />
      <item value="上限" />
      <item value="下降" />
      <item value="突变" />
      <item value="内部" />
      <item value="内外网" />
      <item value="COMPILATION" />
      <item value=" (tbushing.currentRms == 0 ? 'bg-gray'" />
      <item value="正常" />
      <item value="补偿" />
      <item value="offset" />
      <item value="strain" />
      <item value="月" />
      <item value="上一个" />
      <item value="异常" />
      <item value="额定" />
      <item value="安装" />
      <item value="位置" />
      <item value="分类" />
      <item value="等级" />
      <item value="encounter" />
      <item value="present" />
      <item value="evaluate" />
      <item value="&#10;      Returns whether any elements of this stream match the provided&#10;      predicate.  May not evaluate the predicate on all elements if not&#10;      necessary for determining the result.  If the stream is empty then&#10;      {@code false} is returned and the predicate is not evaluated.&#10;     &#10;      &lt;p&gt;This is a &lt;a href=&quot;package-summary.htmlStreamOps&quot;&gt;short-circuiting&#10;      terminal operation&lt;a&gt;.&#10;     &#10;      @apiNote&#10;      This method evaluates the &lt;em&gt;existential quantification&lt;em&gt; of the&#10;      predicate over the elements of the stream (for some x P(x)).&#10;     &#10;      @param predicate a &lt;a href=&quot;package-summary.htmlNonInterference&quot;&gt;non-interfering&lt;a&gt;,&#10;                       &lt;a href=&quot;package-summary.htmlStatelessness&quot;&gt;stateless&lt;a&gt;&#10;                       predicate to apply to elements of this stream&#10;      @return {@code true} if any elements of the stream match the provided&#10;      predicate, otherwise {@code false}&#10;     " />
      <item value="    &#10;      Return {@code true} if there is a value present, otherwise {@code false}.&#10;     &#10;      @return {@code true} if there is a value present, otherwise {@code false}&#10;     " />
      <item value="存在" />
      <item value="NUMERIC" />
      <item value="occurrences" />
      <item value="注册" />
      <item value="北向接口" />
      <item value="platform" />
      <item value="参数帧" />
      <item value="上电复位" />
      <item value="    &#10;      Compares two Dates for ordering.&#10;     &#10;      @param   anotherDate   the &lt;code&gt;Date&lt;code&gt; to be compared.&#10;      @return  the value &lt;code&gt;0&lt;code&gt; if the argument Date is equal to&#10;               this Date; a value less than &lt;code&gt;0&lt;code&gt; if this Date&#10;               is before the Date argument; and a value greater than&#10;           &lt;code&gt;0&lt;code&gt; if this Date is after the Date argument.&#10;      @since   1.2&#10;      @exception NullPointerException if &lt;code&gt;anotherDate&lt;code&gt; is null.&#10;     " />
      <item value="安全运行天数" />
      <item value="&#10;      Obtains a {@code Duration} representing the duration between two temporal objects.&#10;      &lt;p&gt;&#10;      This calculates the duration between two temporal objects. If the objects&#10;      are of different types, then the duration is calculated based on the type&#10;      of the first object. For example, if the first argument is a {@code LocalTime}&#10;      then the second argument is converted to a {@code LocalTime}.&#10;      &lt;p&gt;&#10;      The specified temporal objects must support the {@link ChronoUnitSECONDS SECONDS} unit.&#10;      For full accuracy, either the {@link ChronoUnitNANOS NANOS} unit or the&#10;      {@link ChronoFieldNANO_OF_SECOND NANO_OF_SECOND} field should be supported.&#10;      &lt;p&gt;&#10;      The result of this method can be a negative period if the end is before the start.&#10;      To guarantee to obtain a positive duration call {@link abs()} on the result.&#10;     &#10;      @param startInclusive  the start instant, inclusive, not null&#10;      @param endExclusive  the end instant, exclusive, not null&#10;      @return a {@code Duration}, not null&#10;      @throws DateTimeException if the seconds between the temporals cannot be obtained&#10;      @throws ArithmeticException if the calculation exceeds the capacity of {@code Duration}&#10;     " />
      <item value="小数" />
      <item value="&#10;      Returns the {@code float} value corresponding to a given&#10;      bit representation.&#10;      The argument is considered to be a representation of a&#10;      floating-point value according to the IEEE 754 floating-point&#10;      &quot;single format&quot; bit layout.&#10;     &#10;      &lt;p&gt;If the argument is {@code 0x7f800000}, the result is positive&#10;      infinity.&#10;     &#10;      &lt;p&gt;If the argument is {@code 0xff800000}, the result is negative&#10;      infinity.&#10;     &#10;      &lt;p&gt;If the argument is any value in the range&#10;      {@code 0x7f800001} through {@code 0x7fffffff} or in&#10;      the range {@code 0xff800001} through&#10;      {@code 0xffffffff}, the result is a NaN.  No IEEE 754&#10;      floating-point operation provided by Java can distinguish&#10;      between two NaN values of the same type with different bit&#10;      patterns.  Distinct values of NaN are only distinguishable by&#10;      use of the {@code Float.floatToRawIntBits} method.&#10;     &#10;      &lt;p&gt;In all other cases, let &lt;i&gt;s&lt;i&gt;, &lt;i&gt;e&lt;i&gt;, and &lt;i&gt;m&lt;i&gt; be three&#10;      values that can be computed from the argument:&#10;     &#10;      &lt;blockquote&gt;&lt;pre&gt;{@code&#10;      int s = ((bits &gt;&gt; 31) == 0) ? 1 : -1;&#10;      int e = ((bits &gt;&gt; 23) &amp; 0xff);&#10;      int m = (e == 0) ?&#10;                      (bits &amp; 0x7fffff) &lt;&lt; 1 :&#10;                      (bits &amp; 0x7fffff) | 0x800000;&#10;      }&lt;pre&gt;&lt;blockquote&gt;&#10;     &#10;      Then the floating-point result equals the value of the mathematical&#10;      expression &lt;i&gt;s&lt;i&gt;&amp;middot;&lt;i&gt;m&lt;i&gt;&amp;middot;2&lt;sup&gt;&lt;i&gt;e&lt;i&gt;-150&lt;sup&gt;.&#10;     &#10;      &lt;p&gt;Note that this method may not be able to return a&#10;      {@code float} NaN with exactly same bit pattern as the&#10;      {@code int} argument.  IEEE 754 distinguishes between two&#10;      kinds of NaNs, quiet NaNs and &lt;i&gt;signaling NaNs&lt;i&gt;.  The&#10;      differences between the two kinds of NaN are generally not&#10;      visible in Java.  Arithmetic operations on signaling NaNs turn&#10;      them into quiet NaNs with a different, but often similar, bit&#10;      pattern.  However, on some processors merely copying a&#10;      signaling NaN also performs that conversion.  In particular,&#10;      copying a signaling NaN to return it to the calling method may&#10;      perform this conversion.  So {@code intBitsToFloat} may&#10;      not be able to return a {@code float} with a signaling NaN&#10;      bit pattern.  Consequently, for some {@code int} values,&#10;      {@code floatToRawIntBits(intBitsToFloat(start))} may&#10;      &lt;i&gt;not&lt;i&gt; equal {@code start}.  Moreover, which&#10;      particular bit patterns represent signaling NaNs is platform&#10;      dependent; although all NaN bit patterns, quiet or signaling,&#10;      must be in the NaN range identified above.&#10;     &#10;      @param   bits   an integer.&#10;      @return  the {@code float} floating-point value with the same bit&#10;               pattern.&#10;     " />
      <item value="温补" />
      <item value="保护" />
      <item value="Incorrect" />
      <item value="Case switching, sorting, filtering, incrementing, aligning to columns, grepping, escaping, encoding..." />
      <item value="Manage pull requests and conduct code reviews in your IDE with full source-tree context. Comment on any line, not just the diffs. Use jump-to-definition, your favorite keybindings, and code intelligence with more of your workflow." />
      <item value="Absent" />
      <item value="盘符" />
      <item value="duty" />
      <item value="占空比" />
      <item value="Found multiple occurrences of org.json.JSONObject on the class path:" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="392" />
        <entry key="ENGLISH" value="392" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1640656564022" />
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Segoe UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6787a6ce50600ef8" />
      </youdao-translate>
    </option>
  </component>
</application>