<application>
  <component name="AppStorage">
    <histories>
      <item value="/**&#10;     * Returns a general-purpose number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * &lt;p&gt;This is equivalent to calling&#10;     * {@link #getNumberInstance(Locale)&#10;     *     getNumberInstance(Locale.getDefault(Locale.Category.FORMAT))}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     */" />
      <item value="    /**&#10;     * Returns a general-purpose number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * This is the same as calling&#10;     * {@link #getNumberInstance() getNumberInstance()}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     */" />
      <item value="/**&#10;&#9; * Sets the quality of service for this message.&#10;&#9; * &lt;ul&gt;&#10;&#9; * &lt;li&gt;Quality of Service 0 - indicates that a message should&#10;&#9; * be delivered at most once (zero or one times).  The message will not be persisted to disk,&#10;&#9; * and will not be acknowledged across the network.  This QoS is the fastest,&#10;&#9; * but should only be used for messages which are not valuable - note that&#10;&#9; * if the server cannot process the message (for example, there&#10;&#9; * is an authorization problem), then an&#10;&#9; * {@link MqttCallback#deliveryComplete(IMqttDeliveryToken)}.&#10;&#9; * Also known as &quot;fire and forget&quot;.&lt;/li&gt;&#10;&#9; *&#10;&#9; * &lt;li&gt;Quality of Service 1 - indicates that a message should&#10;&#9; * be delivered at least once (one or more times).  The message can only be delivered safely if&#10;&#9; * it can be persisted, so the application must supply a means of&#10;&#9; * persistence using &lt;code&gt;MqttConnectOptions&lt;/code&gt;.&#10;&#9; * If a persistence mechanism is not specified, the message will not be&#10;&#9; * delivered in the event of a client failure.&#10;&#9; * The message will be acknowledged across the network.&#10;&#9; * This is the default QoS.&lt;/li&gt;&#10;&#9; *&#10;&#9; * &lt;li&gt;Quality of Service 2 - indicates that a message should&#10;&#9; * be delivered once.  The message will be persisted to disk, and will&#10;&#9; * be subject to a two-phase acknowledgement across the network.&#10;&#9; * The message can only be delivered safely if&#10;&#9; * it can be persisted, so the application must supply a means of&#10;&#9; * persistence using &lt;code&gt;MqttConnectOptions&lt;/code&gt;.&#10;&#9; * If a persistence mechanism is not specified, the message will not be&#10;&#9; * delivered in the event of a client failure.&lt;/li&gt;&#10;&#9; *&#10;&#9; *&lt;/ul&gt;&#10;&#9; * If persistence is not configured, QoS 1 and 2 messages will still be delivered&#10;&#9; * in the event of a network or server problem as the client will hold state in memory.&#10;&#9; * If the MQTT client is shutdown or fails and persistence is not configured then&#10;&#9; * delivery of QoS 1 and 2 messages can not be maintained as client-side state will&#10;&#9; * be lost.&#10;&#9; *&#10;&#9; * @param qos the &quot;quality of service&quot; to use.  Set to 0, 1, 2.&#10;&#9; * @throws IllegalArgumentException if value of QoS is not 0, 1 or 2.&#10;&#9; * @throws IllegalStateException if this message cannot be edited&#10;&#9; */" />
      <item value="/**&#10;&#9; * Sets the &quot;keep alive&quot; interval. This value, measured in seconds, defines the&#10;&#9; * maximum time interval between messages sent or received. It enables the&#10;&#9; * client to detect if the server is no longer available, without having to wait&#10;&#9; * for the TCP/IP timeout. The client will ensure that at least one message&#10;&#9; * travels across the network within each keep alive period. In the absence of a&#10;&#9; * data-related message during the time period, the client sends a very small&#10;&#9; * &quot;ping&quot; message, which the server will acknowledge. A value of 0 disables&#10;&#9; * keepalive processing in the client.&#10;&#9; * &lt;p&gt;&#10;&#9; * The default value is 60 seconds&#10;&#9; * &lt;/p&gt;&#10;&#9; *&#10;&#9; * @param keepAliveInterval&#10;&#9; *            the interval, measured in seconds, must be &amp;gt;= 0.&#10;&#9; * @throws IllegalArgumentException&#10;&#9; *             if the keepAliveInterval was invalid&#10;&#9; */" />
      <item value="/**&#10;     * Returns the next pseudorandom, uniformly distributed&#10;     * {@code double} value between {@code 0.0} and&#10;     * {@code 1.0} from this random number generator's sequence.&#10;     *&#10;     * &lt;p&gt;The general contract of {@code nextDouble} is that one&#10;     * {@code double} value, chosen (approximately) uniformly from the&#10;     * range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is&#10;     * pseudorandomly generated and returned.&#10;     *&#10;     * &lt;p&gt;The method {@code nextDouble} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public double nextDouble() {&#10;     *   return (((long)next(26) &lt;&lt; 27) + next(27))&#10;     *     / (double)(1L &lt;&lt; 53);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * &lt;p&gt;The hedge &quot;approximately&quot; is used in the foregoing description only&#10;     * because the {@code next} method is only approximately an unbiased&#10;     * source of independently chosen bits. If it were a perfect source of&#10;     * randomly chosen bits, then the algorithm shown would choose&#10;     * {@code double} values from the stated range with perfect uniformity.&#10;     * &lt;p&gt;[In early versions of Java, the result was incorrectly calculated as:&#10;     *  &lt;pre&gt; {@code&#10;     *   return (((long)next(27) &lt;&lt; 27) + next(27))&#10;     *     / (double)(1L &lt;&lt; 54);}&lt;/pre&gt;&#10;     * This might seem to be equivalent, if not better, but in fact it&#10;     * introduced a large nonuniformity because of the bias in the rounding&#10;     * of floating-point numbers: it was three times as likely that the&#10;     * low-order bit of the significand would be 0 than that it would be 1!&#10;     * This nonuniformity probably doesn't matter much in practice, but we&#10;     * strive for perfection.]&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code double}&#10;     *         value between {@code 0.0} and {@code 1.0} from this&#10;     *         random number generator's sequence&#10;     * @see Math#random&#10;     */" />
      <item value="电流" />
      <item value="布防" />
      <item value="电量" />
      <item value="帧" />
      <item value="假的" />
      <item value="/**&#10;     * Returns the next pseudorandom, uniformly distributed {@code int}&#10;     * value from this random number generator's sequence. The general&#10;     * contract of {@code nextInt} is that one {@code int} value is&#10;     * pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible&#10;     * {@code int} values are produced with (approximately) equal probability.&#10;     *&#10;     * &lt;p&gt;The method {@code nextInt} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public int nextInt() {&#10;     *   return next(32);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code int}&#10;     *         value from this random number generator's sequence&#10;     */" />
      <item value="    /**&#10;     * Returns the arctangent of a number.&#10;     * @param x A numeric expression for which the arctangent is needed.&#10;     */" />
      <item value=" /**&#10;     * Returns the angle (in radians) from the X axis to a point.&#10;     * @param y A numeric expression representing the cartesian y-coordinate.&#10;     * @param x A numeric expression representing the cartesian x-coordinate.&#10;     */" />
      <item value="/**&#10;     * Returns the arctangent of a number.&#10;     * @param x A numeric expression for which the arctangent is needed.&#10;     */" />
      <item value="过小" />
      <item value="滤波" />
      <item value="过滤" />
      <item value=" /**&#10;     * Returns a stream producing the given {@code streamSize} number of&#10;     * pseudorandom {@code double} values, each conforming to the given origin&#10;     * (inclusive) and bound (exclusive).&#10;     *&#10;     * &lt;p&gt;A pseudorandom {@code double} value is generated as if it's the result&#10;     * of calling the following method with the origin and bound:&#10;     * &lt;pre&gt; {@code&#10;     * double nextDouble(double origin, double bound) {&#10;     *   double r = nextDouble();&#10;     *   r = r * (bound - origin) + origin;&#10;     *   if (r &gt;= bound) // correct for rounding&#10;     *     r = Math.nextDown(bound);&#10;     *   return r;&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @param streamSize the number of values to generate&#10;     * @param randomNumberOrigin the origin (inclusive) of each random value&#10;     * @param randomNumberBound the bound (exclusive) of each random value&#10;     * @return a stream of pseudorandom {@code double} values,&#10;     *         each with the given origin (inclusive) and bound (exclusive)&#10;     * @throws IllegalArgumentException if {@code streamSize} is&#10;     *         less than zero&#10;     * @throws IllegalArgumentException if {@code randomNumberOrigin}&#10;     *         is greater than or equal to {@code randomNumberBound}&#10;     * @since 1.8&#10;     */" />
      <item value="/**&#10;     * Returns an effectively unlimited stream of pseudorandom {@code&#10;     * double} values, each between zero (inclusive) and one&#10;     * (exclusive).&#10;     *&#10;     * &lt;p&gt;A pseudorandom {@code double} value is generated as if it's the result&#10;     * of calling the method {@link #nextDouble()}.&#10;     *&#10;     * @implNote This method is implemented to be equivalent to {@code&#10;     * doubles(Long.MAX_VALUE)}.&#10;     *&#10;     * @return a stream of pseudorandom {@code double} values&#10;     * @since 1.8&#10;     */" />
      <item value="/**&#10;     *&#10;     * Creates a socket address from a hostname and a port number.&#10;     * &lt;p&gt;&#10;     * An attempt will be made to resolve the hostname into an InetAddress.&#10;     * If that attempt fails, the address will be flagged as &lt;I&gt;unresolved&lt;/I&gt;.&#10;     * &lt;p&gt;&#10;     * If there is a security manager, its {@code checkConnect} method&#10;     * is called with the host name as its argument to check the permission&#10;     * to resolve it. This could result in a SecurityException.&#10;     * &lt;P&gt;&#10;     * A valid port value is between 0 and 65535.&#10;     * A port number of {@code zero} will let the system pick up an&#10;     * ephemeral port in a {@code bind} operation.&#10;     * &lt;P&gt;&#10;     * @param   hostname the Host name&#10;     * @param   port    The port number&#10;     * @throws IllegalArgumentException if the port parameter is outside the range&#10;     * of valid port values, or if the hostname parameter is &lt;TT&gt;null&lt;/TT&gt;.&#10;     * @throws SecurityException if a security manager is present and&#10;     *                           permission to resolve the host name is&#10;     *                           denied.&#10;     * @see     #isUnresolved()&#10;     */" />
      <item value="响应" />
      <item value="基站" />
      <item value=" /**&#10;     * Returns the angle &lt;i&gt;theta&lt;/i&gt; from the conversion of rectangular&#10;     * coordinates ({@code x},&amp;nbsp;{@code y}) to polar&#10;     * coordinates (r,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;).&#10;     * This method computes the phase &lt;i&gt;theta&lt;/i&gt; by computing an arc tangent&#10;     * of {@code y/x} in the range of -&lt;i&gt;pi&lt;/i&gt; to &lt;i&gt;pi&lt;/i&gt;. Special&#10;     * cases:&#10;     * &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.&#10;     * &lt;li&gt;If the first argument is positive zero and the second argument&#10;     * is positive, or the first argument is positive and finite and the&#10;     * second argument is positive infinity, then the result is positive&#10;     * zero.&#10;     * &lt;li&gt;If the first argument is negative zero and the second argument&#10;     * is positive, or the first argument is negative and finite and the&#10;     * second argument is positive infinity, then the result is negative zero.&#10;     * &lt;li&gt;If the first argument is positive zero and the second argument&#10;     * is negative, or the first argument is positive and finite and the&#10;     * second argument is negative infinity, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;.&#10;     * &lt;li&gt;If the first argument is negative zero and the second argument&#10;     * is negative, or the first argument is negative and finite and the&#10;     * second argument is negative infinity, then the result is the&#10;     * {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;.&#10;     * &lt;li&gt;If the first argument is positive and the second argument is&#10;     * positive zero or negative zero, or the first argument is positive&#10;     * infinity and the second argument is finite, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/2.&#10;     * &lt;li&gt;If the first argument is negative and the second argument is&#10;     * positive zero or negative zero, or the first argument is negative&#10;     * infinity and the second argument is finite, then the result is the&#10;     * {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;/2.&#10;     * &lt;li&gt;If both arguments are positive infinity, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If the first argument is positive infinity and the second argument&#10;     * is negative infinity, then the result is the {@code double}&#10;     * value closest to 3*&lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If the first argument is negative infinity and the second argument&#10;     * is positive infinity, then the result is the {@code double} value&#10;     * closest to -&lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If both arguments are negative infinity, then the result is the&#10;     * {@code double} value closest to -3*&lt;i&gt;pi&lt;/i&gt;/4.&lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;The computed result must be within 2 ulps of the exact result.&#10;     * Results must be semi-monotonic.&#10;     *&#10;     * @param   y   the ordinate coordinate&#10;     * @param   x   the abscissa coordinate&#10;     * @return  the &lt;i&gt;theta&lt;/i&gt; component of the point&#10;     *          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)&#10;     *          in polar coordinates that corresponds to the point&#10;     *          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates.&#10;     */" />
      <item value="    /**&#10;     * Returns the arc tangent of a value; the returned angle is in the&#10;     * range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:&#10;     * &lt;ul&gt;&lt;li&gt;If the argument is NaN, then the result is NaN.&#10;     * &lt;li&gt;If the argument is zero, then the result is a zero with the&#10;     * same sign as the argument.&lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;The computed result must be within 1 ulp of the exact result.&#10;     * Results must be semi-monotonic.&#10;     *&#10;     * @param   a   the value whose arc tangent is to be returned.&#10;     * @return  the arc tangent of the argument.&#10;     */" />
      <item value="/**&#10;     * Creates a formatter using the specified pattern.&#10;     * &lt;p&gt;&#10;     * This method will create a formatter based on a simple&#10;     * &lt;a href=&quot;#patterns&quot;&gt;pattern of letters and symbols&lt;/a&gt;&#10;     * as described in the class documentation.&#10;     * For example, {@code d MMM uuuu} will format 2011-12-03 as '3 Dec 2011'.&#10;     * &lt;p&gt;&#10;     * The formatter will use the {@link Locale#getDefault(Locale.Category) default FORMAT locale}.&#10;     * This can be changed using {@link DateTimeFormatter#withLocale(Locale)} on the returned formatter&#10;     * Alternatively use the {@link #ofPattern(String, Locale)} variant of this method.&#10;     * &lt;p&gt;&#10;     * The returned formatter has no override chronology or zone.&#10;     * It uses {@link ResolverStyle#SMART SMART} resolver style.&#10;     *&#10;     * @param pattern  the pattern to use, not null&#10;     * @return the formatter based on the pattern, not null&#10;     * @throws IllegalArgumentException if the pattern is invalid&#10;     * @see DateTimeFormatterBuilder#appendPattern(String)&#10;     */" />
      <item value="infinity" />
      <item value="Definition" />
      <item value="        tempAlarmHighThres0c = Integer.parseInt(request.getParameter(&quot;tempAlarmHighThres0c&quot;));&#10;        normalSampleIntervalSec = Integer.parseInt(request.getParameter(&quot;normalSampleIntervalSec&quot;));&#10;        normalSampleReportPeriodMin = Integer.parseInt(request.getParameter(&quot;normalSampleReportPeriodMin&quot;));" />
      <item value="距离" />
      <item value="深度" />
      <item value="navy" />
      <item value="开关" />
      <item value="消防" />
      <item value="年" />
      <item value="变压器" />
      <item value="铁芯" />
      <item value=" /**&#10;     * Parses the string argument as a signed {@code long} in the&#10;     * radix specified by the second argument. The characters in the&#10;     * string must all be digits of the specified radix (as determined&#10;     * by whether {@link java.lang.Character#digit(char, int)} returns&#10;     * a nonnegative value), except that the first character may be an&#10;     * ASCII minus sign {@code '-'} ({@code '\u005Cu002D'}) to&#10;     * indicate a negative value or an ASCII plus sign {@code '+'}&#10;     * ({@code '\u005Cu002B'}) to indicate a positive value. The&#10;     * resulting {@code long} value is returned.&#10;     *&#10;     * &lt;p&gt;Note that neither the character {@code L}&#10;     * ({@code '\u005Cu004C'}) nor {@code l}&#10;     * ({@code '\u005Cu006C'}) is permitted to appear at the end&#10;     * of the string as a type indicator, as would be permitted in&#10;     * Java programming language source code - except that either&#10;     * {@code L} or {@code l} may appear as a digit for a&#10;     * radix greater than or equal to 22.&#10;     *&#10;     * &lt;p&gt;An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * &lt;ul&gt;&#10;     *&#10;     * &lt;li&gt;The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * &lt;li&gt;The {@code radix} is either smaller than {@link&#10;     * java.lang.Character#MIN_RADIX} or larger than {@link&#10;     * java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * &lt;li&gt;Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a minus sign&#10;     * {@code '-'} ({@code '\u005Cu002d'}) or plus sign {@code&#10;     * '+'} ({@code '\u005Cu002B'}) provided that the string is&#10;     * longer than length 1.&#10;     *&#10;     * &lt;li&gt;The value represented by the string is not a value of type&#10;     *      {@code long}.&#10;     * &lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;Examples:&#10;     * &lt;blockquote&gt;&lt;pre&gt;&#10;     * parseLong(&quot;0&quot;, 10) returns 0L&#10;     * parseLong(&quot;473&quot;, 10) returns 473L&#10;     * parseLong(&quot;+42&quot;, 10) returns 42L&#10;     * parseLong(&quot;-0&quot;, 10) returns 0L&#10;     * parseLong(&quot;-FF&quot;, 16) returns -255L&#10;     * parseLong(&quot;1100110&quot;, 2) returns 102L&#10;     * parseLong(&quot;99&quot;, 8) throws a NumberFormatException&#10;     * parseLong(&quot;Hazelnut&quot;, 10) throws a NumberFormatException&#10;     * parseLong(&quot;Hazelnut&quot;, 36) returns 1356099454469L&#10;     * &lt;/pre&gt;&lt;/blockquote&gt;&#10;     *&#10;     * @param      s       the {@code String} containing the&#10;     *                     {@code long} representation to be parsed.&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the {@code long} represented by the string argument in&#10;     *             the specified radix.&#10;     * @throws     NumberFormatException  if the string does not contain a&#10;     *             parsable {@code long}.&#10;     */" />
      <item value="/**&#10;     * Returns the angle &lt;i&gt;theta&lt;/i&gt; from the conversion of rectangular&#10;     * coordinates ({@code x},&amp;nbsp;{@code y}) to polar&#10;     * coordinates (r,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;).&#10;     * This method computes the phase &lt;i&gt;theta&lt;/i&gt; by computing an arc tangent&#10;     * of {@code y/x} in the range of -&lt;i&gt;pi&lt;/i&gt; to &lt;i&gt;pi&lt;/i&gt;. Special&#10;     * cases:&#10;     * &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.&#10;     * &lt;li&gt;If the first argument is positive zero and the second argument&#10;     * is positive, or the first argument is positive and finite and the&#10;     * second argument is positive infinity, then the result is positive&#10;     * zero.&#10;     * &lt;li&gt;If the first argument is negative zero and the second argument&#10;     * is positive, or the first argument is negative and finite and the&#10;     * second argument is positive infinity, then the result is negative zero.&#10;     * &lt;li&gt;If the first argument is positive zero and the second argument&#10;     * is negative, or the first argument is positive and finite and the&#10;     * second argument is negative infinity, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;.&#10;     * &lt;li&gt;If the first argument is negative zero and the second argument&#10;     * is negative, or the first argument is negative and finite and the&#10;     * second argument is negative infinity, then the result is the&#10;     * {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;.&#10;     * &lt;li&gt;If the first argument is positive and the second argument is&#10;     * positive zero or negative zero, or the first argument is positive&#10;     * infinity and the second argument is finite, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/2.&#10;     * &lt;li&gt;If the first argument is negative and the second argument is&#10;     * positive zero or negative zero, or the first argument is negative&#10;     * infinity and the second argument is finite, then the result is the&#10;     * {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;/2.&#10;     * &lt;li&gt;If both arguments are positive infinity, then the result is the&#10;     * {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If the first argument is positive infinity and the second argument&#10;     * is negative infinity, then the result is the {@code double}&#10;     * value closest to 3*&lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If the first argument is negative infinity and the second argument&#10;     * is positive infinity, then the result is the {@code double} value&#10;     * closest to -&lt;i&gt;pi&lt;/i&gt;/4.&#10;     * &lt;li&gt;If both arguments are negative infinity, then the result is the&#10;     * {@code double} value closest to -3*&lt;i&gt;pi&lt;/i&gt;/4.&lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;The computed result must be within 2 ulps of the exact result.&#10;     * Results must be semi-monotonic.&#10;     *&#10;     * @param   y   the ordinate coordinate&#10;     * @param   x   the abscissa coordinate&#10;     * @return  the &lt;i&gt;theta&lt;/i&gt; component of the point&#10;     *          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)&#10;     *          in polar coordinates that corresponds to the point&#10;     *          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates.&#10;     */" />
      <item value="阻性" />
      <item value="corresponds" />
      <item value="/**&#10;     * Returns the floor modulus of the {@code int} arguments.&#10;     * &lt;p&gt;&#10;     * The floor modulus is {@code x - (floorDiv(x, y) * y)},&#10;     * has the same sign as the divisor {@code y}, and&#10;     * is in the range of {@code -abs(y) &lt; r &lt; +abs(y)}.&#10;     *&#10;     * &lt;p&gt;&#10;     * The relationship between {@code floorDiv} and {@code floorMod} is such that:&#10;     * &lt;ul&gt;&#10;     *   &lt;li&gt;{@code floorDiv(x, y) * y + floorMod(x, y) == x}&#10;     * &lt;/ul&gt;&#10;     * &lt;p&gt;&#10;     * The difference in values between {@code floorMod} and&#10;     * the {@code %} operator is due to the difference between&#10;     * {@code floorDiv} that returns the integer less than or equal to the quotient&#10;     * and the {@code /} operator that returns the integer closest to zero.&#10;     * &lt;p&gt;&#10;     * Examples:&#10;     * &lt;ul&gt;&#10;     *   &lt;li&gt;If the signs of the arguments are the same, the results&#10;     *       of {@code floorMod} and the {@code %} operator are the same.  &lt;br&gt;&#10;     *       &lt;ul&gt;&#10;     *       &lt;li&gt;{@code floorMod(4, 3) == 1}; &amp;nbsp; and {@code (4 % 3) == 1}&lt;/li&gt;&#10;     *       &lt;/ul&gt;&#10;     *   &lt;li&gt;If the signs of the arguments are different, the results differ from the {@code %} operator.&lt;br&gt;&#10;     *      &lt;ul&gt;&#10;     *      &lt;li&gt;{@code floorMod(+4, -3) == -2}; &amp;nbsp; and {@code (+4 % -3) == +1} &lt;/li&gt;&#10;     *      &lt;li&gt;{@code floorMod(-4, +3) == +2}; &amp;nbsp; and {@code (-4 % +3) == -1} &lt;/li&gt;&#10;     *      &lt;li&gt;{@code floorMod(-4, -3) == -1}; &amp;nbsp; and {@code (-4 % -3) == -1 } &lt;/li&gt;&#10;     *      &lt;/ul&gt;&#10;     *   &lt;/li&gt;&#10;     * &lt;/ul&gt;&#10;     * &lt;p&gt;&#10;     * If the signs of arguments are unknown and a positive modulus&#10;     * is needed it can be computed as {@code (floorMod(x, y) + abs(y)) % abs(y)}.&#10;     *&#10;     * @param x the dividend&#10;     * @param y the divisor&#10;     * @return the floor modulus {@code x - (floorDiv(x, y) * y)}&#10;     * @throws ArithmeticException if the divisor {@code y} is zero&#10;     * @see #floorDiv(int, int)&#10;     * @since 1.8&#10;     */" />
      <item value="角度" />
      <item value="系数" />
      <item value="/**&#10;     * Creates a new instance.&#10;     *&#10;     * @param maxFrameLength&#10;     *        the maximum length of the frame.  If the length of the frame is&#10;     *        greater than this value, {@link TooLongFrameException} will be&#10;     *        thrown.&#10;     * @param lengthFieldOffset&#10;     *        the offset of the length field&#10;     * @param lengthFieldLength&#10;     *        the length of the length field&#10;     * @param lengthAdjustment&#10;     *        the compensation value to add to the value of the length field&#10;     * @param initialBytesToStrip&#10;     *        the number of first bytes to strip out from the decoded frame&#10;     */" />
      <item value=" /**&#10;     * Removes all of the elements from this list (optional operation).&#10;     * The list will be empty after this call returns.&#10;     *&#10;     * @throws UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation&#10;     *         is not supported by this list&#10;     */" />
      <item value="同步" />
      <item value="调整" />
      <item value="/**&#10;     * Returns a representation of the specified floating-point value&#10;     * according to the IEEE 754 floating-point &quot;single format&quot; bit&#10;     * layout, preserving Not-a-Number (NaN) values.&#10;     *&#10;     * &lt;p&gt;Bit 31 (the bit that is selected by the mask&#10;     * {@code 0x80000000}) represents the sign of the floating-point&#10;     * number.&#10;     * Bits 30-23 (the bits that are selected by the mask&#10;     * {@code 0x7f800000}) represent the exponent.&#10;     * Bits 22-0 (the bits that are selected by the mask&#10;     * {@code 0x007fffff}) represent the significand (sometimes called&#10;     * the mantissa) of the floating-point number.&#10;     *&#10;     * &lt;p&gt;If the argument is positive infinity, the result is&#10;     * {@code 0x7f800000}.&#10;     *&#10;     * &lt;p&gt;If the argument is negative infinity, the result is&#10;     * {@code 0xff800000}.&#10;     *&#10;     * &lt;p&gt;If the argument is NaN, the result is the integer representing&#10;     * the actual NaN value.  Unlike the {@code floatToIntBits}&#10;     * method, {@code floatToRawIntBits} does not collapse all the&#10;     * bit patterns encoding a NaN to a single &quot;canonical&quot;&#10;     * NaN value.&#10;     *&#10;     * &lt;p&gt;In all cases, the result is an integer that, when given to the&#10;     * {@link #intBitsToFloat(int)} method, will produce a&#10;     * floating-point value the same as the argument to&#10;     * {@code floatToRawIntBits}.&#10;     *&#10;     * @param   value   a floating-point number.&#10;     * @return the bits that represent the floating-point number.&#10;     * @since 1.3&#10;     */" />
      <item value="/*&#10; * Copyright (c) 2017 Vladislav Kochedykov&#10; * All rights reserved&#10; *&#10; * This file is part of JLibModbus.&#10; *&#10; * Redistribution and use in source and binary forms, with or without modification,&#10; * are permitted provided that the following conditions are met:&#10; *&#10; * 1. Redistributions of source code must retain the above copyright notice,&#10; * this list of conditions and the following disclaimer.&#10; *&#10; * 2. Redistributions in binary form must reproduce the above copyright notice,&#10; * this list of conditions and the following disclaimer in the documentation and/or&#10; * other materials provided with the distribution.&#10; *&#10; * 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse&#10; * or promote products derived from this software without specific prior written permission.&#10; *&#10; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES,&#10; * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.&#10; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,&#10; * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;&#10; * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,&#10; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,&#10; * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10; *&#10; * Authors: Vladislav Y. Kochedykov, software engineer.&#10; * email: vladislav.kochedykov@gmail.com&#10; */" />
      <item value="Coil" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="303" />
        <entry key="ENGLISH" value="304" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Segoe UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6787a6ce50600ef8" />
      </youdao-translate>
    </option>
  </component>
</application>