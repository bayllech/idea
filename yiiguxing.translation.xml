<application>
  <component name="AppStorage">
    <histories>
      <item value="force" />
      <item value="相对" />
      <item value="心跳" />
      <item value="    /**&#10;     * Returns the arctangent of a number.&#10;     * @param x A numeric expression for which the arctangent is needed.&#10;     */" />
      <item value="半径" />
      <item value="直径" />
      <item value=" Could not open JDBC Connection for transaction; nested exception is java.sql.SQLException: interrupt" />
      <item value="Unexpected error occurred in scheduled task." />
      <item value="nexpected error occurred in scheduled task." />
      <item value="interrupt" />
      <item value="square" />
      <item value="标识" />
      <item value=" * This class also provides various utility methods to help implementation&#10; * of a new buffer type, generation of hex dump and swapping an integer's&#10; * byte order." />
      <item value="/**&#10; * Creates a new {@link ByteBuf} by allocating new space or by wrapping&#10; * or copying existing byte arrays, byte buffers and a string.&#10; *&#10; * &lt;h3&gt;Use static import&lt;/h3&gt;&#10; * This classes is intended to be used with Java 5 static import statement:&#10; *&#10; * &lt;pre&gt;&#10; * import static io.netty.buffer.{@link Unpooled}.*;&#10; *&#10; * {@link ByteBuf} heapBuffer    = buffer(128);&#10; * {@link ByteBuf} directBuffer  = directBuffer(256);&#10; * {@link ByteBuf} wrappedBuffer = wrappedBuffer(new byte[128], new byte[256]);&#10; * {@link ByteBuf} copiedBuffe r = copiedBuffer({@link ByteBuffer}.allocate(128));&#10; * &lt;/pre&gt;&#10; *&#10; * &lt;h3&gt;Allocating a new buffer&lt;/h3&gt;&#10; *&#10; * Three buffer types are provided out of the box.&#10; *&#10; * &lt;ul&gt;&#10; * &lt;li&gt;{@link #buffer(int)} allocates a new fixed-capacity heap buffer.&lt;/li&gt;&#10; * &lt;li&gt;{@link #directBuffer(int)} allocates a new fixed-capacity direct buffer.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; *&#10; * &lt;h3&gt;Creating a wrapped buffer&lt;/h3&gt;&#10; *&#10; * Wrapped buffer is a buffer which is a view of one or more existing&#10; * byte arrays and byte buffers.  Any changes in the content of the original&#10; * array or buffer will be visible in the wrapped buffer.  Various wrapper&#10; * methods are provided and their name is all {@code wrappedBuffer()}.&#10; * You might want to take a look at the methods that accept varargs closely if&#10; * you want to create a buffer which is composed of more than one array to&#10; * reduce the number of memory copy.&#10; *&#10; * &lt;h3&gt;Creating a copied buffer&lt;/h3&gt;&#10; *&#10; * Copied buffer is a deep copy of one or more existing byte arrays, byte&#10; * buffers or a string.  Unlike a wrapped buffer, there's no shared data&#10; * between the original data and the copied buffer.  Various copy methods are&#10; * provided and their name is all {@code copiedBuffer()}.  It is also convenient&#10; * to use this operation to merge multiple buffers into one buffer.&#10; *&#10; * &lt;h3&gt;Miscellaneous utility methods&lt;/h3&gt;&#10; *&#10; * This class also provides various utility methods to help implementation&#10; * of a new buffer type, generation of hex dump and swapping an integer's&#10; * byte order.&#10; */" />
      <item value="偏移" />
      <item value="Class Path Scanning Candidate Component Provider" />
      <item value="Concurrent Modification Exception" />
      <item value="/**&#10;     * Generates the next pseudorandom number. Subclasses should&#10;     * override this, as this is used by all other methods.&#10;     *&#10;     * &lt;p&gt;The general contract of {@code next} is that it returns an&#10;     * {@code int} value and if the argument {@code bits} is between&#10;     * {@code 1} and {@code 32} (inclusive), then that many low-order&#10;     * bits of the returned value will be (approximately) independently&#10;     * chosen bit values, each of which is (approximately) equally&#10;     * likely to be {@code 0} or {@code 1}. The method {@code next} is&#10;     * implemented by class {@code Random} by atomically updating the seed to&#10;     *  &lt;pre&gt;{@code (seed * 0x5DEECE66DL + 0xBL) &amp; ((1L &lt;&lt; 48) - 1)}&lt;/pre&gt;&#10;     * and returning&#10;     *  &lt;pre&gt;{@code (int)(seed &gt;&gt;&gt; (48 - bits))}.&lt;/pre&gt;&#10;     *&#10;     * This is a linear congruential pseudorandom number generator, as&#10;     * defined by D. H. Lehmer and described by Donald E. Knuth in&#10;     * &lt;i&gt;The Art of Computer Programming,&lt;/i&gt; Volume 3:&#10;     * &lt;i&gt;Seminumerical Algorithms&lt;/i&gt;, section 3.2.1.&#10;     *&#10;     * @param  bits random bits&#10;     * @return the next pseudorandom value from this random number&#10;     *         generator's sequence&#10;     * @since  1.1&#10;     */" />
      <item value=" /**&#10;     * Returns the next pseudorandom, uniformly distributed {@code int}&#10;     * value from this random number generator's sequence. The general&#10;     * contract of {@code nextInt} is that one {@code int} value is&#10;     * pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible&#10;     * {@code int} values are produced with (approximately) equal probability.&#10;     *&#10;     * &lt;p&gt;The method {@code nextInt} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public int nextInt() {&#10;     *   return next(32);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code int}&#10;     *         value from this random number generator's sequence&#10;     */" />
      <item value="black" />
      <item value="blank" />
      <item value="黑色" />
      <item value="slave" />
      <item value="半波" />
      <item value="序号" />
      <item value="algorithm" />
      <item value="算法" />
      <item value="门阀值" />
      <item value="相位" />
      <item value="门磁" />
      <item value="温湿度" />
      <item value="水位" />
      <item value="水浸" />
      <item value="chart" />
      <item value="char" />
      <item value="/**&#10;     * Removes all of the elements from this list (optional operation).&#10;     * The list will be empty after this call returns.&#10;     *&#10;     * @throws UnsupportedOperationException if the &lt;tt&gt;clear&lt;/tt&gt; operation&#10;     *         is not supported by this list&#10;     */" />
      <item value="丝袜" />
      <item value="性感" />
      <item value="/**&#10;     * Performs a &lt;a href=&quot;package-summary.html#Reduction&quot;&gt;reduction&lt;/a&gt; on the&#10;     * elements of this stream, using the provided identity value and an&#10;     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;&#10;     * accumulation function, and returns the reduced value.  This is equivalent&#10;     * to:&#10;     * &lt;pre&gt;{@code&#10;     *     T result = identity;&#10;     *     for (T element : this stream)&#10;     *         result = accumulator.apply(result, element)&#10;     *     return result;&#10;     * }&lt;/pre&gt;&#10;     *&#10;     * but is not constrained to execute sequentially.&#10;     *&#10;     * &lt;p&gt;The {@code identity} value must be an identity for the accumulator&#10;     * function. This means that for all {@code t},&#10;     * {@code accumulator.apply(identity, t)} is equal to {@code t}.&#10;     * The {@code accumulator} function must be an&#10;     * &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt; function.&#10;     *&#10;     * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html#StreamOps&quot;&gt;terminal&#10;     * operation&lt;/a&gt;.&#10;     *&#10;     * @apiNote Sum, min, max, average, and string concatenation are all special&#10;     * cases of reduction. Summing a stream of numbers can be expressed as:&#10;     *&#10;     * &lt;pre&gt;{@code&#10;     *     Integer sum = integers.reduce(0, (a, b) -&gt; a+b);&#10;     * }&lt;/pre&gt;&#10;     *&#10;     * or:&#10;     *&#10;     * &lt;pre&gt;{@code&#10;     *     Integer sum = integers.reduce(0, Integer::sum);&#10;     * }&lt;/pre&gt;&#10;     *&#10;     * &lt;p&gt;While this may seem a more roundabout way to perform an aggregation&#10;     * compared to simply mutating a running total in a loop, reduction&#10;     * operations parallelize more gracefully, without needing additional&#10;     * synchronization and with greatly reduced risk of data races.&#10;     *&#10;     * @param identity the identity value for the accumulating function&#10;     * @param accumulator an &lt;a href=&quot;package-summary.html#Associativity&quot;&gt;associative&lt;/a&gt;,&#10;     *                    &lt;a href=&quot;package-summary.html#NonInterference&quot;&gt;non-interfering&lt;/a&gt;,&#10;     *                    &lt;a href=&quot;package-summary.html#Statelessness&quot;&gt;stateless&lt;/a&gt;&#10;     *                    function for combining two values&#10;     * @return the result of the reduction&#10;     */" />
      <item value="syntax" />
      <item value="offset" />
      <item value=" /**&#10;     * Creates a new random number generator. This constructor sets&#10;     * the seed of the random number generator to a value very likely&#10;     * to be distinct from any other invocation of this constructor.&#10;     */" />
      <item value="断路器" />
      <item value="倒数第二个" />
      <item value="&#9;/**&#10;&#9; * Return the contents of the file as an array of bytes.&#10;&#9; * @return the contents of the file as bytes, or an empty byte array if empty&#10;&#9; * @throws IOException in case of access errors (if the temporary store fails)&#10;&#9; */" />
      <item value="&#9;/**&#10;&#9; * Return the size of the file in bytes.&#10;&#9; * @return the size of the file, or 0 if empty&#10;&#9; */" />
      <item value="minus Seconds" />
      <item value="digit" />
      <item value="/**&#10;     * Parses the string argument as an unsigned integer in the radix&#10;     * specified by the second argument.  An unsigned integer maps the&#10;     * values usually associated with negative numbers to positive&#10;     * numbers larger than {@code MAX_VALUE}.&#10;     *&#10;     * The characters in the string must all be digits of the&#10;     * specified radix (as determined by whether {@link&#10;     * java.lang.Character#digit(char, int)} returns a nonnegative&#10;     * value), except that the first character may be an ASCII plus&#10;     * sign {@code '+'} ({@code '\u005Cu002B'}). The resulting&#10;     * integer value is returned.&#10;     *&#10;     * &lt;p&gt;An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * &lt;li&gt;The radix is either smaller than&#10;     * {@link java.lang.Character#MIN_RADIX} or&#10;     * larger than {@link java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * &lt;li&gt;Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a plus sign&#10;     * {@code '+'} ({@code '\u005Cu002B'}) provided that the&#10;     * string is longer than length 1.&#10;     *&#10;     * &lt;li&gt;The value represented by the string is larger than the&#10;     * largest unsigned {@code int}, 2&lt;sup&gt;32&lt;/sup&gt;-1.&#10;     *&#10;     * &lt;/ul&gt;&#10;     *&#10;     *&#10;     * @param      s   the {@code String} containing the unsigned integer&#10;     *                  representation to be parsed&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the integer represented by the string argument in the&#10;     *             specified radix.&#10;     * @throws     NumberFormatException if the {@code String}&#10;     *             does not contain a parsable {@code int}.&#10;     * @since 1.8&#10;     */" />
      <item value="时标" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="254" />
        <entry key="ENGLISH" value="255" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
    <option name="ignoreRegExp" value="" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Segoe UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6787a6ce50600ef8" />
      </youdao-translate>
    </option>
  </component>
</application>