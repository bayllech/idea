<application>
  <component name="AppStorage">
    <histories>
      <item value="结构" />
      <item value="差值" />
      <item value="相差" />
      <item value="差" />
      <item value="injection" />
      <item value="检查" />
      <item value="检测" />
      <item value="透传" />
      <item value="profile" />
      <item value="清空" />
      <item value="maxFileSize property is mandatory." />
      <item value="灰色" />
      <item value="局部放电" />
      <item value="局放" />
      <item value="重复" />
      <item value="峰峰值" />
      <item value="有效值" />
      <item value="位移" />
      <item value="加速度" />
      <item value="振动" />
      <item value="数据类型" />
      <item value="数值" />
      <item value="单位" />
      <item value="/**&#10;     * Returns the {@code float} value corresponding to a given&#10;     * bit representation.&#10;     * The argument is considered to be a representation of a&#10;     * floating-point value according to the IEEE 754 floating-point&#10;     * &quot;single format&quot; bit layout.&#10;     *&#10;     * &lt;p&gt;If the argument is {@code 0x7f800000}, the result is positive&#10;     * infinity.&#10;     *&#10;     * &lt;p&gt;If the argument is {@code 0xff800000}, the result is negative&#10;     * infinity.&#10;     *&#10;     * &lt;p&gt;If the argument is any value in the range&#10;     * {@code 0x7f800001} through {@code 0x7fffffff} or in&#10;     * the range {@code 0xff800001} through&#10;     * {@code 0xffffffff}, the result is a NaN.  No IEEE 754&#10;     * floating-point operation provided by Java can distinguish&#10;     * between two NaN values of the same type with different bit&#10;     * patterns.  Distinct values of NaN are only distinguishable by&#10;     * use of the {@code Float.floatToRawIntBits} method.&#10;     *&#10;     * &lt;p&gt;In all other cases, let &lt;i&gt;s&lt;/i&gt;, &lt;i&gt;e&lt;/i&gt;, and &lt;i&gt;m&lt;/i&gt; be three&#10;     * values that can be computed from the argument:&#10;     *&#10;     * &lt;blockquote&gt;&lt;pre&gt;{@code&#10;     * int s = ((bits &gt;&gt; 31) == 0) ? 1 : -1;&#10;     * int e = ((bits &gt;&gt; 23) &amp; 0xff);&#10;     * int m = (e == 0) ?&#10;     *                 (bits &amp; 0x7fffff) &lt;&lt; 1 :&#10;     *                 (bits &amp; 0x7fffff) | 0x800000;&#10;     * }&lt;/pre&gt;&lt;/blockquote&gt;&#10;     *&#10;     * Then the floating-point result equals the value of the mathematical&#10;     * expression &lt;i&gt;s&lt;/i&gt;&amp;middot;&lt;i&gt;m&lt;/i&gt;&amp;middot;2&lt;sup&gt;&lt;i&gt;e&lt;/i&gt;-150&lt;/sup&gt;.&#10;     *&#10;     * &lt;p&gt;Note that this method may not be able to return a&#10;     * {@code float} NaN with exactly same bit pattern as the&#10;     * {@code int} argument.  IEEE 754 distinguishes between two&#10;     * kinds of NaNs, quiet NaNs and &lt;i&gt;signaling NaNs&lt;/i&gt;.  The&#10;     * differences between the two kinds of NaN are generally not&#10;     * visible in Java.  Arithmetic operations on signaling NaNs turn&#10;     * them into quiet NaNs with a different, but often similar, bit&#10;     * pattern.  However, on some processors merely copying a&#10;     * signaling NaN also performs that conversion.  In particular,&#10;     * copying a signaling NaN to return it to the calling method may&#10;     * perform this conversion.  So {@code intBitsToFloat} may&#10;     * not be able to return a {@code float} with a signaling NaN&#10;     * bit pattern.  Consequently, for some {@code int} values,&#10;     * {@code floatToRawIntBits(intBitsToFloat(start))} may&#10;     * &lt;i&gt;not&lt;/i&gt; equal {@code start}.  Moreover, which&#10;     * particular bit patterns represent signaling NaNs is platform&#10;     * dependent; although all NaN bit patterns, quiet or signaling,&#10;     * must be in the NaN range identified above.&#10;     *&#10;     * @param   bits   an integer.&#10;     * @return  the {@code float} floating-point value with the same bit&#10;     *          pattern.&#10;     */" />
      <item value="/**&#10;     * Parses the string argument as an unsigned integer in the radix&#10;     * specified by the second argument.  An unsigned integer maps the&#10;     * values usually associated with negative numbers to positive&#10;     * numbers larger than {@code MAX_VALUE}.&#10;     *&#10;     * The characters in the string must all be digits of the&#10;     * specified radix (as determined by whether {@link&#10;     * java.lang.Character#digit(char, int)} returns a nonnegative&#10;     * value), except that the first character may be an ASCII plus&#10;     * sign {@code '+'} ({@code '\u005Cu002B'}). The resulting&#10;     * integer value is returned.&#10;     *&#10;     * &lt;p&gt;An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * &lt;li&gt;The radix is either smaller than&#10;     * {@link java.lang.Character#MIN_RADIX} or&#10;     * larger than {@link java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * &lt;li&gt;Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a plus sign&#10;     * {@code '+'} ({@code '\u005Cu002B'}) provided that the&#10;     * string is longer than length 1.&#10;     *&#10;     * &lt;li&gt;The value represented by the string is larger than the&#10;     * largest unsigned {@code int}, 2&lt;sup&gt;32&lt;/sup&gt;-1.&#10;     *&#10;     * &lt;/ul&gt;&#10;     *&#10;     *&#10;     * @param      s   the {@code String} containing the unsigned integer&#10;     *                  representation to be parsed&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the integer represented by the string argument in the&#10;     *             specified radix.&#10;     * @throws     NumberFormatException if the {@code String}&#10;     *             does not contain a parsable {@code int}.&#10;     * @since 1.8&#10;     */" />
      <item value="相对" />
      <item value="/**&#10;     * Parses the string argument as a signed integer in the radix&#10;     * specified by the second argument. The characters in the string&#10;     * must all be digits of the specified radix (as determined by&#10;     * whether {@link java.lang.Character#digit(char, int)} returns a&#10;     * nonnegative value), except that the first character may be an&#10;     * ASCII minus sign {@code '-'} ({@code '\u005Cu002D'}) to&#10;     * indicate a negative value or an ASCII plus sign {@code '+'}&#10;     * ({@code '\u005Cu002B'}) to indicate a positive value. The&#10;     * resulting integer value is returned.&#10;     *&#10;     * &lt;p&gt;An exception of type {@code NumberFormatException} is&#10;     * thrown if any of the following situations occurs:&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;The first argument is {@code null} or is a string of&#10;     * length zero.&#10;     *&#10;     * &lt;li&gt;The radix is either smaller than&#10;     * {@link java.lang.Character#MIN_RADIX} or&#10;     * larger than {@link java.lang.Character#MAX_RADIX}.&#10;     *&#10;     * &lt;li&gt;Any character of the string is not a digit of the specified&#10;     * radix, except that the first character may be a minus sign&#10;     * {@code '-'} ({@code '\u005Cu002D'}) or plus sign&#10;     * {@code '+'} ({@code '\u005Cu002B'}) provided that the&#10;     * string is longer than length 1.&#10;     *&#10;     * &lt;li&gt;The value represented by the string is not a value of type&#10;     * {@code int}.&#10;     * &lt;/ul&gt;&#10;     *&#10;     * &lt;p&gt;Examples:&#10;     * &lt;blockquote&gt;&lt;pre&gt;&#10;     * parseInt(&quot;0&quot;, 10) returns 0&#10;     * parseInt(&quot;473&quot;, 10) returns 473&#10;     * parseInt(&quot;+42&quot;, 10) returns 42&#10;     * parseInt(&quot;-0&quot;, 10) returns 0&#10;     * parseInt(&quot;-FF&quot;, 16) returns -255&#10;     * parseInt(&quot;1100110&quot;, 2) returns 102&#10;     * parseInt(&quot;2147483647&quot;, 10) returns 2147483647&#10;     * parseInt(&quot;-2147483648&quot;, 10) returns -2147483648&#10;     * parseInt(&quot;2147483648&quot;, 10) throws a NumberFormatException&#10;     * parseInt(&quot;99&quot;, 8) throws a NumberFormatException&#10;     * parseInt(&quot;Kona&quot;, 10) throws a NumberFormatException&#10;     * parseInt(&quot;Kona&quot;, 27) returns 411787&#10;     * &lt;/pre&gt;&lt;/blockquote&gt;&#10;     *&#10;     * @param      s   the {@code String} containing the integer&#10;     *                  representation to be parsed&#10;     * @param      radix   the radix to be used while parsing {@code s}.&#10;     * @return     the integer represented by the string argument in the&#10;     *             specified radix.&#10;     * @exception  NumberFormatException if the {@code String}&#10;     *             does not contain a parsable {@code int}.&#10;     */" />
      <item value="连续" />
      <item value="Passive" />
      <item value="/* if the message hasn't been delivered to a per subscription handler, give it to the default handler */" />
      <item value="/**&#10;     * Returns a general-purpose number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * &lt;p&gt;This is equivalent to calling&#10;     * {@link #getNumberInstance(Locale)&#10;     *     getNumberInstance(Locale.getDefault(Locale.Category.FORMAT))}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     * @see java.util.Locale#getDefault(java.util.Locale.Category)&#10;     * @see java.util.Locale.Category#FORMAT&#10;     */" />
      <item value="    /**&#10;     * Returns a general-purpose number format for the current default&#10;     * {@link java.util.Locale.Category#FORMAT FORMAT} locale.&#10;     * This is the same as calling&#10;     * {@link #getNumberInstance() getNumberInstance()}.&#10;     *&#10;     * @return the {@code NumberFormat} instance for general-purpose number&#10;     * formatting&#10;     */" />
      <item value="/**&#10;&#9; * Sets the quality of service for this message.&#10;&#9; * &lt;ul&gt;&#10;&#9; * &lt;li&gt;Quality of Service 0 - indicates that a message should&#10;&#9; * be delivered at most once (zero or one times).  The message will not be persisted to disk,&#10;&#9; * and will not be acknowledged across the network.  This QoS is the fastest,&#10;&#9; * but should only be used for messages which are not valuable - note that&#10;&#9; * if the server cannot process the message (for example, there&#10;&#9; * is an authorization problem), then an&#10;&#9; * {@link MqttCallback#deliveryComplete(IMqttDeliveryToken)}.&#10;&#9; * Also known as &quot;fire and forget&quot;.&lt;/li&gt;&#10;&#9; *&#10;&#9; * &lt;li&gt;Quality of Service 1 - indicates that a message should&#10;&#9; * be delivered at least once (one or more times).  The message can only be delivered safely if&#10;&#9; * it can be persisted, so the application must supply a means of&#10;&#9; * persistence using &lt;code&gt;MqttConnectOptions&lt;/code&gt;.&#10;&#9; * If a persistence mechanism is not specified, the message will not be&#10;&#9; * delivered in the event of a client failure.&#10;&#9; * The message will be acknowledged across the network.&#10;&#9; * This is the default QoS.&lt;/li&gt;&#10;&#9; *&#10;&#9; * &lt;li&gt;Quality of Service 2 - indicates that a message should&#10;&#9; * be delivered once.  The message will be persisted to disk, and will&#10;&#9; * be subject to a two-phase acknowledgement across the network.&#10;&#9; * The message can only be delivered safely if&#10;&#9; * it can be persisted, so the application must supply a means of&#10;&#9; * persistence using &lt;code&gt;MqttConnectOptions&lt;/code&gt;.&#10;&#9; * If a persistence mechanism is not specified, the message will not be&#10;&#9; * delivered in the event of a client failure.&lt;/li&gt;&#10;&#9; *&#10;&#9; *&lt;/ul&gt;&#10;&#9; * If persistence is not configured, QoS 1 and 2 messages will still be delivered&#10;&#9; * in the event of a network or server problem as the client will hold state in memory.&#10;&#9; * If the MQTT client is shutdown or fails and persistence is not configured then&#10;&#9; * delivery of QoS 1 and 2 messages can not be maintained as client-side state will&#10;&#9; * be lost.&#10;&#9; *&#10;&#9; * @param qos the &quot;quality of service&quot; to use.  Set to 0, 1, 2.&#10;&#9; * @throws IllegalArgumentException if value of QoS is not 0, 1 or 2.&#10;&#9; * @throws IllegalStateException if this message cannot be edited&#10;&#9; */" />
      <item value="/**&#10;&#9; * Sets the &quot;keep alive&quot; interval. This value, measured in seconds, defines the&#10;&#9; * maximum time interval between messages sent or received. It enables the&#10;&#9; * client to detect if the server is no longer available, without having to wait&#10;&#9; * for the TCP/IP timeout. The client will ensure that at least one message&#10;&#9; * travels across the network within each keep alive period. In the absence of a&#10;&#9; * data-related message during the time period, the client sends a very small&#10;&#9; * &quot;ping&quot; message, which the server will acknowledge. A value of 0 disables&#10;&#9; * keepalive processing in the client.&#10;&#9; * &lt;p&gt;&#10;&#9; * The default value is 60 seconds&#10;&#9; * &lt;/p&gt;&#10;&#9; *&#10;&#9; * @param keepAliveInterval&#10;&#9; *            the interval, measured in seconds, must be &amp;gt;= 0.&#10;&#9; * @throws IllegalArgumentException&#10;&#9; *             if the keepAliveInterval was invalid&#10;&#9; */" />
      <item value="/**&#10;     * Returns the next pseudorandom, uniformly distributed&#10;     * {@code double} value between {@code 0.0} and&#10;     * {@code 1.0} from this random number generator's sequence.&#10;     *&#10;     * &lt;p&gt;The general contract of {@code nextDouble} is that one&#10;     * {@code double} value, chosen (approximately) uniformly from the&#10;     * range {@code 0.0d} (inclusive) to {@code 1.0d} (exclusive), is&#10;     * pseudorandomly generated and returned.&#10;     *&#10;     * &lt;p&gt;The method {@code nextDouble} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public double nextDouble() {&#10;     *   return (((long)next(26) &lt;&lt; 27) + next(27))&#10;     *     / (double)(1L &lt;&lt; 53);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * &lt;p&gt;The hedge &quot;approximately&quot; is used in the foregoing description only&#10;     * because the {@code next} method is only approximately an unbiased&#10;     * source of independently chosen bits. If it were a perfect source of&#10;     * randomly chosen bits, then the algorithm shown would choose&#10;     * {@code double} values from the stated range with perfect uniformity.&#10;     * &lt;p&gt;[In early versions of Java, the result was incorrectly calculated as:&#10;     *  &lt;pre&gt; {@code&#10;     *   return (((long)next(27) &lt;&lt; 27) + next(27))&#10;     *     / (double)(1L &lt;&lt; 54);}&lt;/pre&gt;&#10;     * This might seem to be equivalent, if not better, but in fact it&#10;     * introduced a large nonuniformity because of the bias in the rounding&#10;     * of floating-point numbers: it was three times as likely that the&#10;     * low-order bit of the significand would be 0 than that it would be 1!&#10;     * This nonuniformity probably doesn't matter much in practice, but we&#10;     * strive for perfection.]&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code double}&#10;     *         value between {@code 0.0} and {@code 1.0} from this&#10;     *         random number generator's sequence&#10;     * @see Math#random&#10;     */" />
      <item value="电流" />
      <item value="布防" />
      <item value="电量" />
      <item value="帧" />
      <item value="假的" />
      <item value="/**&#10;     * Returns the next pseudorandom, uniformly distributed {@code int}&#10;     * value from this random number generator's sequence. The general&#10;     * contract of {@code nextInt} is that one {@code int} value is&#10;     * pseudorandomly generated and returned. All 2&lt;sup&gt;32&lt;/sup&gt; possible&#10;     * {@code int} values are produced with (approximately) equal probability.&#10;     *&#10;     * &lt;p&gt;The method {@code nextInt} is implemented by class {@code Random}&#10;     * as if by:&#10;     *  &lt;pre&gt; {@code&#10;     * public int nextInt() {&#10;     *   return next(32);&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @return the next pseudorandom, uniformly distributed {@code int}&#10;     *         value from this random number generator's sequence&#10;     */" />
      <item value="    /**&#10;     * Returns the arctangent of a number.&#10;     * @param x A numeric expression for which the arctangent is needed.&#10;     */" />
      <item value=" /**&#10;     * Returns the angle (in radians) from the X axis to a point.&#10;     * @param y A numeric expression representing the cartesian y-coordinate.&#10;     * @param x A numeric expression representing the cartesian x-coordinate.&#10;     */" />
      <item value="/**&#10;     * Returns the arctangent of a number.&#10;     * @param x A numeric expression for which the arctangent is needed.&#10;     */" />
      <item value="过小" />
      <item value="滤波" />
      <item value="过滤" />
      <item value=" /**&#10;     * Returns a stream producing the given {@code streamSize} number of&#10;     * pseudorandom {@code double} values, each conforming to the given origin&#10;     * (inclusive) and bound (exclusive).&#10;     *&#10;     * &lt;p&gt;A pseudorandom {@code double} value is generated as if it's the result&#10;     * of calling the following method with the origin and bound:&#10;     * &lt;pre&gt; {@code&#10;     * double nextDouble(double origin, double bound) {&#10;     *   double r = nextDouble();&#10;     *   r = r * (bound - origin) + origin;&#10;     *   if (r &gt;= bound) // correct for rounding&#10;     *     r = Math.nextDown(bound);&#10;     *   return r;&#10;     * }}&lt;/pre&gt;&#10;     *&#10;     * @param streamSize the number of values to generate&#10;     * @param randomNumberOrigin the origin (inclusive) of each random value&#10;     * @param randomNumberBound the bound (exclusive) of each random value&#10;     * @return a stream of pseudorandom {@code double} values,&#10;     *         each with the given origin (inclusive) and bound (exclusive)&#10;     * @throws IllegalArgumentException if {@code streamSize} is&#10;     *         less than zero&#10;     * @throws IllegalArgumentException if {@code randomNumberOrigin}&#10;     *         is greater than or equal to {@code randomNumberBound}&#10;     * @since 1.8&#10;     */" />
      <item value="/**&#10;     * Returns an effectively unlimited stream of pseudorandom {@code&#10;     * double} values, each between zero (inclusive) and one&#10;     * (exclusive).&#10;     *&#10;     * &lt;p&gt;A pseudorandom {@code double} value is generated as if it's the result&#10;     * of calling the method {@link #nextDouble()}.&#10;     *&#10;     * @implNote This method is implemented to be equivalent to {@code&#10;     * doubles(Long.MAX_VALUE)}.&#10;     *&#10;     * @return a stream of pseudorandom {@code double} values&#10;     * @since 1.8&#10;     */" />
      <item value="/**&#10;     *&#10;     * Creates a socket address from a hostname and a port number.&#10;     * &lt;p&gt;&#10;     * An attempt will be made to resolve the hostname into an InetAddress.&#10;     * If that attempt fails, the address will be flagged as &lt;I&gt;unresolved&lt;/I&gt;.&#10;     * &lt;p&gt;&#10;     * If there is a security manager, its {@code checkConnect} method&#10;     * is called with the host name as its argument to check the permission&#10;     * to resolve it. This could result in a SecurityException.&#10;     * &lt;P&gt;&#10;     * A valid port value is between 0 and 65535.&#10;     * A port number of {@code zero} will let the system pick up an&#10;     * ephemeral port in a {@code bind} operation.&#10;     * &lt;P&gt;&#10;     * @param   hostname the Host name&#10;     * @param   port    The port number&#10;     * @throws IllegalArgumentException if the port parameter is outside the range&#10;     * of valid port values, or if the hostname parameter is &lt;TT&gt;null&lt;/TT&gt;.&#10;     * @throws SecurityException if a security manager is present and&#10;     *                           permission to resolve the host name is&#10;     *                           denied.&#10;     * @see     #isUnresolved()&#10;     */" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="333" />
        <entry key="ENGLISH" value="333" />
        <entry key="POLISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1634902483397" />
  </component>
  <component name="Settings">
    <option name="foldOriginal" value="true" />
    <option name="keepFormat" value="true" />
    <option name="overrideFont" value="true" />
    <option name="phoneticFontFamily" value="Segoe UI" />
    <option name="primaryFontFamily" value="Microsoft YaHei UI" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6787a6ce50600ef8" />
      </youdao-translate>
    </option>
  </component>
</application>